// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_observed_probability
NumericVector compute_observed_probability(const DataFrame& x, const int& number_of_samples, const int& number_of_dims, const int& number_of_cells, const IntegerVector& number_of_levels);
RcppExport SEXP _zebu_compute_observed_probability(SEXP xSEXP, SEXP number_of_samplesSEXP, SEXP number_of_dimsSEXP, SEXP number_of_cellsSEXP, SEXP number_of_levelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type number_of_samples(number_of_samplesSEXP);
    Rcpp::traits::input_parameter< const int& >::type number_of_dims(number_of_dimsSEXP);
    Rcpp::traits::input_parameter< const int& >::type number_of_cells(number_of_cellsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type number_of_levels(number_of_levelsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_observed_probability(x, number_of_samples, number_of_dims, number_of_cells, number_of_levels));
    return rcpp_result_gen;
END_RCPP
}
// compute_expected_probability
NumericVector compute_expected_probability(const List& margins);
RcppExport SEXP _zebu_compute_expected_probability(SEXP marginsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type margins(marginsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_expected_probability(margins));
    return rcpp_result_gen;
END_RCPP
}
// compute_marginal_probability
List compute_marginal_probability(const DataFrame& x, const int& number_of_samples, const int& number_of_dims, const int& number_of_cells, const IntegerVector& number_of_levels);
RcppExport SEXP _zebu_compute_marginal_probability(SEXP xSEXP, SEXP number_of_samplesSEXP, SEXP number_of_dimsSEXP, SEXP number_of_cellsSEXP, SEXP number_of_levelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type number_of_samples(number_of_samplesSEXP);
    Rcpp::traits::input_parameter< const int& >::type number_of_dims(number_of_dimsSEXP);
    Rcpp::traits::input_parameter< const int& >::type number_of_cells(number_of_cellsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type number_of_levels(number_of_levelsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marginal_probability(x, number_of_samples, number_of_dims, number_of_cells, number_of_levels));
    return rcpp_result_gen;
END_RCPP
}
// estimate_prob
List estimate_prob(const DataFrame& x);
RcppExport SEXP _zebu_estimate_prob(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_prob(x));
    return rcpp_result_gen;
END_RCPP
}
// local_association
List local_association(const List& x, const std::string& measure, const double& nr);
RcppExport SEXP _zebu_local_association(SEXP xSEXP, SEXP measureSEXP, SEXP nrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type measure(measureSEXP);
    Rcpp::traits::input_parameter< const double& >::type nr(nrSEXP);
    rcpp_result_gen = Rcpp::wrap(local_association(x, measure, nr));
    return rcpp_result_gen;
END_RCPP
}
// lewontin_d
List lewontin_d(const List& x);
RcppExport SEXP _zebu_lewontin_d(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(lewontin_d(x));
    return rcpp_result_gen;
END_RCPP
}
// duchers_z
List duchers_z(const List& x);
RcppExport SEXP _zebu_duchers_z(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(duchers_z(x));
    return rcpp_result_gen;
END_RCPP
}
// pmi
List pmi(const List& x, const int& normalize);
RcppExport SEXP _zebu_pmi(SEXP xSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(pmi(x, normalize));
    return rcpp_result_gen;
END_RCPP
}
// chisq
List chisq(const List& x, const double& nr);
RcppExport SEXP _zebu_chisq(SEXP xSEXP, SEXP nrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type nr(nrSEXP);
    rcpp_result_gen = Rcpp::wrap(chisq(x, nr));
    return rcpp_result_gen;
END_RCPP
}
// permute_dataframe
DataFrame permute_dataframe(DataFrame& x, const List& group);
RcppExport SEXP _zebu_permute_dataframe(SEXP xSEXP, SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const List& >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(permute_dataframe(x, group));
    return rcpp_result_gen;
END_RCPP
}
// permtest_rcpp
List permtest_rcpp(const List& x, const int& nb, const List& group);
RcppExport SEXP _zebu_permtest_rcpp(SEXP xSEXP, SEXP nbSEXP, SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< const List& >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(permtest_rcpp(x, nb, group));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_zebu_compute_observed_probability", (DL_FUNC) &_zebu_compute_observed_probability, 5},
    {"_zebu_compute_expected_probability", (DL_FUNC) &_zebu_compute_expected_probability, 1},
    {"_zebu_compute_marginal_probability", (DL_FUNC) &_zebu_compute_marginal_probability, 5},
    {"_zebu_estimate_prob", (DL_FUNC) &_zebu_estimate_prob, 1},
    {"_zebu_local_association", (DL_FUNC) &_zebu_local_association, 3},
    {"_zebu_lewontin_d", (DL_FUNC) &_zebu_lewontin_d, 1},
    {"_zebu_duchers_z", (DL_FUNC) &_zebu_duchers_z, 1},
    {"_zebu_pmi", (DL_FUNC) &_zebu_pmi, 2},
    {"_zebu_chisq", (DL_FUNC) &_zebu_chisq, 2},
    {"_zebu_permute_dataframe", (DL_FUNC) &_zebu_permute_dataframe, 2},
    {"_zebu_permtest_rcpp", (DL_FUNC) &_zebu_permtest_rcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_zebu(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
